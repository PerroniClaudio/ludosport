import{C as h}from"./auto-CdBL8C_c.js";const l=(o,s,i)=>({school:null,courseData:[],filteredCourseData:[],schoolYearData:[],currentCoursesPage:1,totalCoursesPages:1,paginatedCourses:[],colors:["rgb(237,116,0)","rgb(212, 145, 255)","rgb(179,4,16)","rgb(0,94,152)","rgb(0,129,57)"],async getSchoolYearData(){return await(await fetch(`${o=="admin"?"":"/"+o}/schools/${s.id}/athletes-year-data`)).json()},createGraph(){const e=document.getElementById("usercoursegraph").getContext("2d"),t=this.courseData.map(r=>r.name),a=this.courseData.map(r=>r.athletes),u={type:"pie",data:{labels:t,datasets:[{label:"Athletes",data:a,backgroundColor:this.colors,hoverOffset:4}]}};new h(e,u)},searchCourseByValue(e){const t=e.target.value.toLowerCase();t!=""?(this.filteredCourseData=this.courseData.filter(a=>a.name.toLowerCase().includes(t)),this.updateCourses()):(this.filteredCourseData=this.courseData,this.updateCourses())},nextPage(){this.currentCoursesPage<this.totalCoursesPages&&(this.currentCoursesPage++,this.updateCourses())},previousPage(){this.currentCoursesPage>1&&(this.currentCoursesPage--,this.updateCourses())},updateCourses(){const e=(this.currentCoursesPage-1)*10;this.totalCoursesPages=Math.ceil(this.filteredCourseData.length/10),this.paginatedCourses=this.filteredCourseData.slice(e,e+10)},async init(){console.log("usercoursegraph initialized"),this.school=s,console.log(s.name),this.courseData=i,this.schoolYearData=await this.getSchoolYearData(),this.createGraph(),this.filteredCourseData=this.courseData,this.totalCoursesPages=Math.ceil(this.filteredCourseData.length/10),this.updateCourses(),this.$dispatch("usercoursegraph-data",this.courseData)}});export{l as usercoursegraphadmin};
